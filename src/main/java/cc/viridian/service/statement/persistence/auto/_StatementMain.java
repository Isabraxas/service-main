package cc.viridian.service.statement.persistence.auto;

import java.time.LocalDateTime;

import org.apache.cayenne.CayenneDataObject;
import org.apache.cayenne.exp.Property;

/**
 * Class _StatementMain was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _StatementMain extends CayenneDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String ID_PK_COLUMN = "ID";

    public static final Property<String> ACCOUNT_CODE = Property.create("accountCode", String.class);
    public static final Property<String> ACCOUNT_CURRENCY = Property.create("accountCurrency", String.class);
    public static final Property<String> ACCOUNT_TYPE = Property.create("accountType", String.class);
    public static final Property<String> CUSTOMER_CODE = Property.create("customerCode", String.class);
    public static final Property<String> CUSTOMER_NAME = Property.create("customerName", String.class);
    public static final Property<Boolean> ENABLED = Property.create("enabled", Boolean.class);
    public static final Property<Integer> FK_FORMAT = Property.create("fkFormat", Integer.class);
    public static final Property<Integer> FK_SEND = Property.create("fkSend", Integer.class);
    public static final Property<String> FREQUENCY = Property.create("frequency", String.class);
    public static final Property<Boolean> OVERWRITTEN_BY_BANK = Property.create("overwrittenByBank", Boolean.class);
    public static final Property<LocalDateTime> TIME_CREATE = Property.create("timeCreate", LocalDateTime.class);
    public static final Property<LocalDateTime> TIME_MODIFY = Property.create("timeModify", LocalDateTime.class);
    public static final Property<String> USR_CREATE = Property.create("usrCreate", String.class);
    public static final Property<String> USR_MODIFY = Property.create("usrModify", String.class);

    public void setAccountCode(String accountCode) {
        writeProperty("accountCode", accountCode);
    }
    public String getAccountCode() {
        return (String)readProperty("accountCode");
    }

    public void setAccountCurrency(String accountCurrency) {
        writeProperty("accountCurrency", accountCurrency);
    }
    public String getAccountCurrency() {
        return (String)readProperty("accountCurrency");
    }

    public void setAccountType(String accountType) {
        writeProperty("accountType", accountType);
    }
    public String getAccountType() {
        return (String)readProperty("accountType");
    }

    public void setCustomerCode(String customerCode) {
        writeProperty("customerCode", customerCode);
    }
    public String getCustomerCode() {
        return (String)readProperty("customerCode");
    }

    public void setCustomerName(String customerName) {
        writeProperty("customerName", customerName);
    }
    public String getCustomerName() {
        return (String)readProperty("customerName");
    }

    public void setEnabled(boolean enabled) {
        writeProperty("enabled", enabled);
    }
	public boolean isEnabled() {
        Boolean value = (Boolean)readProperty("enabled");
        return (value != null) ? value.booleanValue() : false;
    }

    public void setFkFormat(int fkFormat) {
        writeProperty("fkFormat", fkFormat);
    }
    public int getFkFormat() {
        Object value = readProperty("fkFormat");
        return (value != null) ? (Integer) value : 0;
    }

    public void setFkSend(int fkSend) {
        writeProperty("fkSend", fkSend);
    }
    public int getFkSend() {
        Object value = readProperty("fkSend");
        return (value != null) ? (Integer) value : 0;
    }

    public void setFrequency(String frequency) {
        writeProperty("frequency", frequency);
    }
    public String getFrequency() {
        return (String)readProperty("frequency");
    }

    public void setOverwrittenByBank(boolean overwrittenByBank) {
        writeProperty("overwrittenByBank", overwrittenByBank);
    }
	public boolean isOverwrittenByBank() {
        Boolean value = (Boolean)readProperty("overwrittenByBank");
        return (value != null) ? value.booleanValue() : false;
    }

    public void setTimeCreate(LocalDateTime timeCreate) {
        writeProperty("timeCreate", timeCreate);
    }
    public LocalDateTime getTimeCreate() {
        return (LocalDateTime)readProperty("timeCreate");
    }

    public void setTimeModify(LocalDateTime timeModify) {
        writeProperty("timeModify", timeModify);
    }
    public LocalDateTime getTimeModify() {
        return (LocalDateTime)readProperty("timeModify");
    }

    public void setUsrCreate(String usrCreate) {
        writeProperty("usrCreate", usrCreate);
    }
    public String getUsrCreate() {
        return (String)readProperty("usrCreate");
    }

    public void setUsrModify(String usrModify) {
        writeProperty("usrModify", usrModify);
    }
    public String getUsrModify() {
        return (String)readProperty("usrModify");
    }

}
