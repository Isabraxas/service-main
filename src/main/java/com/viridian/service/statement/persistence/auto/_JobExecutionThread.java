package com.viridian.service.statement.persistence.auto;

import java.time.LocalDateTime;
import java.util.List;

import org.apache.cayenne.CayenneDataObject;
import org.apache.cayenne.exp.Property;

import com.viridian.service.statement.persistence.JobExecution;

/**
 * Class _JobExecutionThread was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _JobExecutionThread extends CayenneDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String ID_PK_COLUMN = "ID";

    public static final Property<Boolean> COMPLETED = Property.create("completed", Boolean.class);
    public static final Property<LocalDateTime> COMPLETED_DATE = Property.create("completedDate", LocalDateTime.class);
    public static final Property<Boolean> RUNNING = Property.create("running", Boolean.class);
    public static final Property<Boolean> SLEEPING = Property.create("sleeping", Boolean.class);
    public static final Property<LocalDateTime> STARTED_DATE = Property.create("startedDate", LocalDateTime.class);
    public static final Property<String> STATEMENT_ACCOUNT = Property.create("statementAccount", String.class);
    public static final Property<LocalDateTime> STATEMENT_DATE = Property.create("statementDate", LocalDateTime.class);
    public static final Property<String> STATUS = Property.create("status", String.class);
    public static final Property<Integer> THREAD_NUMBER = Property.create("threadNumber", Integer.class);
    public static final Property<List<JobExecution>> X_JOB_EXECUTION = Property.create("xJOB_EXECUTION", List.class);

    public void setCompleted(boolean completed) {
        writeProperty("completed", completed);
    }
	public boolean isCompleted() {
        Boolean value = (Boolean)readProperty("completed");
        return (value != null) ? value.booleanValue() : false;
    }

    public void setCompletedDate(LocalDateTime completedDate) {
        writeProperty("completedDate", completedDate);
    }
    public LocalDateTime getCompletedDate() {
        return (LocalDateTime)readProperty("completedDate");
    }

    public void setRunning(boolean running) {
        writeProperty("running", running);
    }
	public boolean isRunning() {
        Boolean value = (Boolean)readProperty("running");
        return (value != null) ? value.booleanValue() : false;
    }

    public void setSleeping(boolean sleeping) {
        writeProperty("sleeping", sleeping);
    }
	public boolean isSleeping() {
        Boolean value = (Boolean)readProperty("sleeping");
        return (value != null) ? value.booleanValue() : false;
    }

    public void setStartedDate(LocalDateTime startedDate) {
        writeProperty("startedDate", startedDate);
    }
    public LocalDateTime getStartedDate() {
        return (LocalDateTime)readProperty("startedDate");
    }

    public void setStatementAccount(String statementAccount) {
        writeProperty("statementAccount", statementAccount);
    }
    public String getStatementAccount() {
        return (String)readProperty("statementAccount");
    }

    public void setStatementDate(LocalDateTime statementDate) {
        writeProperty("statementDate", statementDate);
    }
    public LocalDateTime getStatementDate() {
        return (LocalDateTime)readProperty("statementDate");
    }

    public void setStatus(String status) {
        writeProperty("status", status);
    }
    public String getStatus() {
        return (String)readProperty("status");
    }

    public void setThreadNumber(int threadNumber) {
        writeProperty("threadNumber", threadNumber);
    }
    public int getThreadNumber() {
        Object value = readProperty("threadNumber");
        return (value != null) ? (Integer) value : 0;
    }

    public void addToXJOB_EXECUTION(JobExecution obj) {
        addToManyTarget("xJOB_EXECUTION", obj, true);
    }
    public void removeFromXJOB_EXECUTION(JobExecution obj) {
        removeToManyTarget("xJOB_EXECUTION", obj, true);
    }
    @SuppressWarnings("unchecked")
    public List<JobExecution> getXJOB_EXECUTION() {
        return (List<JobExecution>)readProperty("xJOB_EXECUTION");
    }


}
